builtin println(..val) end
builtin print(..val) end
builtin timestamp() end

builtin loadLibrary(path) end
builtin unloadLibrary(lib_ptr) end
builtin prepareLibraryFunc(lib_ptr ret_type name params) end
builtin callLibraryFunc(func_handle params) end

def variables()
    println("VARIABLES");
    number := 123.456;
    println(number);
    x := 123 * 6;
    y := 2 + 2 * 2;
    println(x + y);

    block
        x := 2;
        println(x);
    end
end

def factorial(n)
    if n == 1
        return 1;
    end 

    return n * factorial(n - 1);
end

def functions()
    def noArguments()
        return 123;
    end

    def withArguments(a b c)
        return a + b + c;
    end

    def fib(n)
        if n <= 1
            return n;
        end
        return fib(n - 1) + fib(n - 2);
    end

    def varArgsFunc(a b ..rest)
        println("varargs:", a, b, rest);
        return rest;
    end

    def emptyVarArgs(..rest)
        println("emptyVarArgs", rest);
        return rest;
    end


    println(noArguments());
    println(withArguments(1, 2, 3));
    println(factorial(5));
    println(fib(10));
    println(emptyVarArgs()); // TODO
end

def arrays()
    arr := {1, 2, factorial(5), 4, 5, 6};
    println(arr);
    access := arr[2];
    println(access);
    access2 := {0, 1, 69, 3}[+-+-3];
    println(access2);
end

def closure()
    def makeCounter()
        counter := 0;

        def inc()
            counter = counter + 1;
            return counter;
        end

        return inc;
    end

    counter := makeCounter();
    println(counter());
    println(counter());
    println(counter());
    println(counter());
end

def strings()
    str := "Hello, World!";
    println(str);
end

def structs()
    def Color(r g b a)
        return #{
            r = r,
            g = g,
            b = b,
            a = a,
        };
    end

    color := Color(100, 200, 123, 255);

    println("color", color);
end

def loadLibraryFunc(lib_ptr ret_type name params)
    func_handle := prepareLibraryFunc(lib_ptr, ret_type, name, params);
    def call(..params)
        return callLibraryFunc(func_handle, params);
    end
    return call;
end


def raylibExample()
    raylib := loadLibrary("/usr/lib/libraylib.so");

    initWindow := loadLibraryFunc(raylib, "void", "InitWindow", {"int", "int", "pointer"});
    quitWindow := loadLibraryFunc(raylib, "void", "CloseWindow", {});
    beginDrawing := loadLibraryFunc(raylib, "void", "BeginDrawing", {});
    endDrawing := loadLibraryFunc(raylib, "void", "EndDrawing", {});
    windowShouldClose := loadLibraryFunc(raylib, "bool", "WindowShouldClose", {});
    drawFPS := loadLibraryFunc(raylib, "void", "DrawFPS", {"int", "int"});
    setTargetFPS := loadLibraryFunc(raylib, "void", "SetTargetFPS", {"int"});

    Color := #{
        r = "u8",
        g = "u8",
        b = "u8",
        a = "u8",
    };
    
    // drawText := loadLibraryFunc(raylib, "void", "DrawText", {"pointer", "int", "int", "int", "color"});

    clearBackground := loadLibraryFunc(raylib, "void", "ClearBackground", {Color});

    initWindow(800, 600, "hello from AinScript!");
    setTargetFPS(60);

    while !windowShouldClose()
        beginDrawing();
        clearBackground(0, 0, 0, 255);
        drawFPS(16, 16);
        endDrawing();
    end
    
    quitWindow();
    unloadLibrary(raylib);
end

def test2(data)
    return data;
end

def test(data)
    println(data);
    test2(data);
    return data;
end

def test3(..data)
end

def main()
    // D := 123;
    // variables();
    // functions();
    // closure();
    // strings();
    // arrays();
    // structs();
    raylibExample();
end

main();

